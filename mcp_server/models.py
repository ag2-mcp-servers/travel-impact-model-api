# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:04:21+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Date(BaseModel):
    day: Optional[int] = Field(
        None,
        description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
    )
    month: Optional[int] = Field(
        None,
        description='Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.',
    )
    year: Optional[int] = Field(
        None,
        description='Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.',
    )


class EmissionsGramsPerPax(BaseModel):
    business: Optional[int] = Field(
        None,
        description='Emissions for one passenger in business class in grams. This field is always computed and populated, regardless of whether the aircraft has business class seats or not.',
    )
    economy: Optional[int] = Field(
        None,
        description='Emissions for one passenger in economy class in grams. This field is always computed and populated, regardless of whether the aircraft has economy class seats or not.',
    )
    first: Optional[int] = Field(
        None,
        description='Emissions for one passenger in first class in grams. This field is always computed and populated, regardless of whether the aircraft has first class seats or not.',
    )
    premiumEconomy: Optional[int] = Field(
        None,
        description='Emissions for one passenger in premium economy class in grams. This field is always computed and populated, regardless of whether the aircraft has premium economy class seats or not.',
    )


class Flight(BaseModel):
    departureDate: Optional[Date] = Field(
        None,
        description='Required. Date of the flight in the time zone of the origin airport. Must be a date in the present or future.',
    )
    destination: Optional[str] = Field(
        None,
        description='Required. IATA airport code for flight destination, e.g. "JFK".',
    )
    flightNumber: Optional[int] = Field(
        None, description='Required. Flight number, e.g. 324.'
    )
    operatingCarrierCode: Optional[str] = Field(
        None, description='Required. IATA carrier code, e.g. "AA".'
    )
    origin: Optional[str] = Field(
        None, description='Required. IATA airport code for flight origin, e.g. "LHR".'
    )


class FlightWithEmissions(BaseModel):
    emissionsGramsPerPax: Optional[EmissionsGramsPerPax] = Field(
        None,
        description='Optional. Per-passenger emission estimate numbers. Will not be present if emissions could not be computed. For the list of reasons why emissions could not be computed, see ComputeFlightEmissions.',
    )
    flight: Optional[Flight] = Field(
        None,
        description='Required. Matches the flight identifiers in the request. Note: all IATA codes are capitalized.',
    )


class ModelVersion(BaseModel):
    dated: Optional[str] = Field(
        None,
        description='Dated versions: Model datasets are recreated with refreshed input data but no change to the algorithms regularly.',
    )
    major: Optional[int] = Field(
        None,
        description='Major versions: Major changes to methodology (e.g. adding new data sources to the model that lead to major output changes). Such changes will be infrequent and announced well in advance. Might involve API version changes, which will respect guidelines in https://cloud.google.com/endpoints/docs/openapi/versioning-an-api#backwards-incompatible',
    )
    minor: Optional[int] = Field(
        None,
        description='Minor versions: Changes to the model that, while being consistent across schema versions, change the model parameters or implementation.',
    )
    patch: Optional[int] = Field(
        None,
        description='Patch versions: Implementation changes meant to address bugs or inaccuracies in the model implementation.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ComputeFlightEmissionsRequest(BaseModel):
    flights: Optional[List[Flight]] = Field(
        None, description='Required. Direct flights to return emission estimates for.'
    )


class ComputeFlightEmissionsResponse(BaseModel):
    flightEmissions: Optional[List[FlightWithEmissions]] = Field(
        None, description='List of flight legs with emission estimates.'
    )
    modelVersion: Optional[ModelVersion] = Field(
        None,
        description='The model version under which emission estimates for all flights in this response were computed.',
    )
